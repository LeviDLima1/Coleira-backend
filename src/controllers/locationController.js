const db = require('../models');
const Location = db.Location;
const Pet = db.Pet; // Importar modelo Pet
const User = db.User; // Importar modelo User
const SafeZone = db.SafeZone; // Importar modelo SafeZone
const Alert = db.Alert; // Importar modelo Alert

// Fun√ß√£o auxiliar para calcular a dist√¢ncia entre dois pontos geogr√°ficos (f√≥rmula de Haversine)
function haversineDistance(lat1, lon1, lat2, lon2) {
    const R = 6371e3; // Raio da Terra em metros
    const œÜ1 = lat1 * Math.PI / 180; // œÜ, Œª em radianos
    const œÜ2 = lat2 * Math.PI / 180;
    const ŒîœÜ = (lat2 - lat1) * Math.PI / 180;
    const ŒîŒª = (lon2 - lon1) * Math.PI / 180;

    const a = Math.sin(ŒîœÜ / 2) * Math.sin(ŒîœÜ / 2) +
        Math.cos(œÜ1) * Math.cos(œÜ2) *
        Math.sin(ŒîŒª / 2) * Math.sin(ŒîŒª / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

    const d = R * c; // Dist√¢ncia em metros
    return d;
}

// Fun√ß√£o para verificar se um ponto est√° dentro de uma zona circular
function isInsideSafeZone(pointLat, pointLon, zoneLat, zoneLon, zoneRadius) {
    const distance = haversineDistance(pointLat, pointLon, zoneLat, zoneLon);
    return distance <= zoneRadius;
}

exports.receiveLocationData = async (req, res) => {
    try {
        console.log('üì¶ Dados de localiza√ß√£o recebidos:', req.body);

        // Assumindo que o corpo da requisi√ß√£o cont√©m:
        // { petId: number, latitude: number, longitude: number, batteryLevel?: number, status?: string }
        const { petId, latitude, longitude, batteryLevel, status } = req.body;

        // TODO: Adicionar valida√ß√£o dos dados recebidos mais robusta
        if (!petId || latitude === undefined || longitude === undefined) {
            return res.status(400).json({
                success: false,
                error: 'Dados de localiza√ß√£o incompletos.'
            });
        }

        // Salvar os dados na tabela locations
        const newLocation = await Location.create({
            pet_id: petId, // Usar pet_id para corresponder ao nome da coluna no DB
            latitude: latitude,
            longitude: longitude,
            timestamp: new Date(), // Usar a data/hora atual do servidor ao receber
            battery_level: batteryLevel,
            status: status,
        });

        console.log('‚úÖ Localiza√ß√£o salva no DB:', newLocation);

        // --- L√≥gica de verifica√ß√£o de Zona Segura e Cria√ß√£o de Alerta ---
        let petStatus = 'Localizado'; // Status padr√£o se n√£o houver zonas ou verifica√ß√£o

        try {
            // 1. Encontrar o pet para obter o user_id
            const pet = await Pet.findByPk(petId);

            if (pet) {
                // 2. Buscar zonas seguras do usu√°rio dono do pet
                const safeZones = await SafeZone.findAll({
                    where: { user_id: pet.userId },
                });

                console.log(`üîç Encontradas ${safeZones.length} zonas seguras para o usu√°rio ${pet.userId}.`);

                if (safeZones.length > 0) {
                    let insideAnyZone = false;
                    for (const zone of safeZones) {
                        if (isInsideSafeZone(latitude, longitude, zone.center_latitude, zone.center_longitude, zone.radius)) {
                            insideAnyZone = true;
                            console.log(`‚úÖ Pet ${petId} est√° DENTRO da zona segura: ${zone.name || zone.id}`);
                            petStatus = 'Dentro da Zona Segura';
                            // Se estiver dentro de QUALQUER zona, consideramos seguro
                            break; // Sai do loop assim que encontrar uma zona
                        }
                    }

                    if (!insideAnyZone) {
                        console.log(`‚ùå Pet ${petId} est√° FORA de TODAS as zonas seguras.`);
                        petStatus = 'Fora da Zona Segura';

                        // TODO: Melhorar a l√≥gica para evitar alertas duplicados frequentes (ex: verificar se um alerta recente j√° existe para sa√≠da da zona)

                        // Criar registro de alerta no banco de dados
                        try {
                            await Alert.create({
                                pet_id: petId,
                                type: 'Sa√≠da da Zona Segura',
                                message: `O pet ${pet.name || pet.id} saiu da zona segura.`,
                                latitude: latitude,
                                longitude: longitude,
                                timestamp: new Date(),
                                is_resolved: false,
                            });
                            console.log('üö® Alerta de sa√≠da da zona segura criado para o pet:', petId);
                        } catch (alertError) {
                            console.error('‚ùå Erro ao criar alerta:', alertError);
                            // N√£o re-lan√ßar para n√£o falhar o salvamento da localiza√ß√£o
                        }
                    }
                } else {
                    console.log(`‚ÑπÔ∏è Nenhuma zona segura definida para o usu√°rio ${pet.userId}.`);
                    petStatus = 'Sem Zona Segura Definida';
                }
            } else {
                console.log(`‚ö†Ô∏è Pet com ID ${petId} n√£o encontrado para verificar zonas seguras.`);
                petStatus = 'Pet N√£o Encontrado';
            }
        } catch (zoneError) {
            console.error('‚ùå Erro geral na l√≥gica de zona segura:', zoneError);
            petStatus = `Erro ao verificar Zona Segura`;
        }

        // Opcional: Atualizar o status da localiza√ß√£o rec√©m-criada com o resultado da verifica√ß√£o
        // await newLocation.update({ status: petStatus });
        // Considere se voc√™ quer guardar o status da zona para CADA ponto de localiza√ß√£o ou apenas ter um status GERAL do pet.
        // Para um status geral, voc√™ pode atualizar o modelo Pet ou ter um cache.
        // Por enquanto, vamos apenas logar e criar o alerta, e o frontend buscar√° o status ao obter a √∫ltima localiza√ß√£o/detalhes do pet.

        res.status(201).json({
            success: true,
            message: 'Dados de localiza√ß√£o recebidos e salvos com sucesso.',
            data: {
                ...newLocation.toJSON(), // Retornar os dados da localiza√ß√£o
                zoneStatus: petStatus // Incluir o status da zona na resposta (opcional)
            }
        });

    } catch (error) {
        console.error('‚ùå Erro ao receber/salvar dados de localiza√ß√£o:', error);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
}; 